
 member_tbl_02의 모든 레코드(튜플)을 검색하라
	select * from member_tbl_02;

 member_tbl_02의 이름,전화번호,주소를 번호의 내림차순으로 검색하라
	select custname,phone,address from member_tbl_02 order by custno desc;

 member_tbl_02의 이름이 '복'자가 포함되는 레코드(튜플)의 이름, 번호, 전화번호 항목을 검색하라
	select custname,custno,phone from member_tbl_02 where custname like '%복%';

 member_tbl_02의 가입일 2015년 10월과 11월인 레코드(튜플)을 검색하라
	select * from member_tbl_02 where joindate between '2015-10-01' and '2015-11-30';

 Alias 기능을 활용하여 모든 레코드(튜플)의 이름, 전화번호, 주소 등이 한글컬럼으로 나올 수 있도록 검색하라
	select custname as '이름', phone as '전화번호', address as '전화번호' from member_tbl_02;

 money_tbl_02에서 회원번호별로 금액에 대한 합계/평균/건수/최대/최소를 계산하도록 하라
	select custno as '회원번호', sum(price) as '금액합계' from money_tbl_02 group by custno;
	select custno as '회원번호', avg(price) as '금액평균' from money_tbl_02 group by custno;
	select custno as '회원번호', max(price) as '최대금액' from money_tbl_02 group by custno;
	select custno as '회원번호', min(price) as '최소금액' from money_tbl_02 group by custno;
	select custno as '회원번호', count(*) as '거래건수' from money_tbl_02 group by custno;

 money_tbl_02에서 거래금액이 1500 이상인 레코드(튜플)를 대상으로 회원번호, 판매번호, 단가, 수량, 금액 컬럼만을 
 검색하여 그 결과를 뷰(money_view)로 생성하라 - 뷰(view) - 가상 테이블로서 검색명령만 저장
	-- create view 뷰이름 as select ,....
	create view money_view as select custno, saleno, pcost, amount, price from money_tbl_02 where price>=1500;
	select * from money_view;
	그러므로, view는 삽입, 삭제, 변경이 불가하므로 만약 변경/추가/삭제를 하려고 할 경우는 실제 테이블에서 해야함

 inner join 기능을 활용하여 구매한 회원의 회원번호별 회원번호, 회원명, 주소, 합계금액을 검색하시오.
	(단, member_tbl_02와 money_tbl_02를 연결)
	-- select A.항목, B.항목 from 테이블A A inner join 테이블B B on A.항목 = B.항목;
	select a.custno, a.custname, a.address, sum(b.price) as '합계금액' from member_tbl_02 a inner join
	money_tbl_02 b on a.custno=b.custno group by a.custno;

	-- 테이블A에는 있으나 B에는 없는 데이터 검출
	-- select a.항목, b.항목 from 테이블A a left join 테이블B b on a.항목=b.항목
	-- 테이블B에는 있으나 A에는 없는 데이터 검출
	-- select a.항목, b.항목 from 테이블A a right join 테이블B b on a.항목=b.항목

 서브쿼리를 활용하여 주소가 서울인 회원의 회원번호, 단가, 수량, 금액을 검색하시오.
	-- 서로 조건컬럼이 일치하는 데이터를 검출
	-- select 컬럼명 from 결과도출테이블명 where 조건컬럼명 in (select 조건컬럼명 from 상대테이블명)
	select custno, pcost, amount, price from money_tbl_02 where custno in 
	(select custno from member_tbl_02 where address like '서울%')
	
	-- 회원의 거주도시가 서울, 대전, 경기인 회원명, 전화번호, 주소
	select custname, phone, address from member_tbl where city in ('서울','대전','경기');
	select custname, phone, address from member_tbl where city='서울' or city='대전' or city='경기';

 서브쿼리를 활용하여 주소가 서울이 아닌 회원의 회원번호, 단가, 수량, 금액을 검색하시오.
	-- 서로 조건컬럼이 일치하지 않는 데이터를 검출
	-- select 컬럼명 from 결과도출테이블명 where 조건컬럼명 not in (select 조건컬럼명 from 상대테이블명)
	select custno, pcost, amount, price from money_tbl_02 where custno not in 
	(select custno from member_tbl_02 where address like '서울%')

 sales_tbl_03과 money_tbl_02에 합집합 연산을 구현하여 sale_view뷰를 생성하시오.
	create view sale_view as select * from sales_tbl_03 union select * from money_tbl_02;
	select * from sale_view;

 sales_tbl_03과 money_tbl_02에 교집합(Intersect) 연산이 되도록 내부 조인을 구현하여 sale_cross_view뷰를 생성하시오.
	(단, sales_tbl_03의 custno, saleno를 money_tbl_02의 price의 컬럼만 추출)
	create view sale_cross_view as 
	select a.custno, a.saleno, b.price from sales_tbl_03 a inner join money_tbl_02 b on a.saleno=b.saleno
	and a.custno=b.custno;
	select * from sale_cross_view;

 sales_tbl_03을 복제하여 sales_tbl_04 테이블로 생성하시오.
	create table sales_tbl_04 as select * from sales_tbl_03;
